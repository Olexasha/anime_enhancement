import asyncio
import os
from datetime import datetime

from src.audio.audio_handling import extract_audio, insert_audio
from src.config.settings import (
    END_BATCH_TO_UPSCALE,
    FINAL_VIDEO,
    INPUT_BATCHES_DIR,
    ORIGINAL_VIDEO,
    START_BATCH_TO_UPSCALE,
    STEP_PER_BATCH,
)
from src.frames.frames_helpers import extract_frames_to_batches, get_fps_accurate
from src.frames.upscale import delete_frames, upscale_batches
from src.video.video_handling import VideoHandler


def print_header(title: str) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    print(f"\n{'=' * 50}")
    print(f"üéØ {title.upper()}".center(50))
    print(f"{'=' * 50}")


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ."""
    start_time = datetime.now()
    print_header("–∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")

    print("\nüìπ –ü–æ–ª—É—á–∞–µ–º FPS –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ...")
    fps = get_fps_accurate(ORIGINAL_VIDEO)
    print(f"‚úÖ FPS –≤–∏–¥–µ–æ: {fps}")

    print("\nüîä –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É...")
    audio = extract_audio()
    if audio:
        print(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio}")
    else:
        print("‚ö†Ô∏è –ê—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    print("\nüéûÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ...")
    extract_frames_to_batches()
    print("‚úÖ –ö–∞–¥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã")

    print("\nüõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫ –≤–∏–¥–µ–æ...")
    tmp_builder = VideoHandler(fps=fps)
    print(f"‚úÖ –°–±–æ—Ä—â–∏–∫ –≥–æ—Ç–æ–≤ (FPS: {fps})")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_batch = START_BATCH_TO_UPSCALE
    end_batch = 0
    if END_BATCH_TO_UPSCALE == 0:
        end_batch_to_upscale = len(os.listdir(INPUT_BATCHES_DIR)) - 1  # -1 –¥–ª—è .gitkeep
    else:
        end_batch_to_upscale = END_BATCH_TO_UPSCALE
    print(f"\nüî¢ –í—Å–µ–≥–æ –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_batch_to_upscale}")

    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —à–∞–≥–æ–º {STEP_PER_BATCH} –±–∞—Ç—á–µ–π...")
    while end_batch != end_batch_to_upscale:
        if start_batch + STEP_PER_BATCH <= end_batch_to_upscale:
            # –µ—Å–ª–∏ —à–∞–≥ STEP_PER_BATCH –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, —Ç–æ –±–µ—Ä–µ–º –µ–≥–æ
            end_batch = start_batch + STEP_PER_BATCH - 1
        else:
            # –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞—Ç—á–∏ –¥–æ –∫–æ–Ω—Ü–∞
            end_batch = end_batch_to_upscale

        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏ —Å {start_batch} –ø–æ {end_batch}...")

        # –ó–∞–ø—É—Å–∫ –∞–ø—Å–∫–µ–π–ª–∞ –±–∞—Ç—á–µ–π —Å —Ñ—Ä–µ–π–º–∞–º–∏
        asyncio.run(upscale_batches(start_batch, end_batch))
        print(f"‚úÖ –ë–∞—Ç—á–∏ {start_batch}-{end_batch} —É—Å–ø–µ—à–Ω–æ –∞–ø—Å–∫–µ–π–ª–µ–Ω—ã")

        batches_to_perform = [f"batch_{i}" for i in range(start_batch, end_batch + 1)]
        short_video = tmp_builder.process_frames_to_video(batches_to_perform)
        if short_video:
            delete_frames(del_upscaled=True)
            print(f"üé• –í–∏–¥–µ–æ —Å–æ–±—Ä–∞–Ω–æ: {short_video}")
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã")

        start_batch += STEP_PER_BATCH

    print_header("—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ")
    delete_frames(del_upscaled=False)
    # –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    final_merge = tmp_builder.build_final_video()

    if audio:
        print("\nüîä –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ...")
        insert_audio(audio, fps, video_path=final_merge, output_path=FINAL_VIDEO)
        print(f"‚úÖ –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ {FINAL_VIDEO}")
    else:
        print("\nüîá –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∑–≤—É–∫–∞")

    print_header("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"\nüéâ –ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {FINAL_VIDEO}")
    end_time = datetime.now()
    print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time}")
    print("=" * 50)


if __name__ == "__main__":
    main()
