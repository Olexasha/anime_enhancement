import asyncio
import glob
import os
import re
from datetime import datetime
from math import ceil

from src.audio.audio_handling import AudioHandler
from src.config.comp_params import ComputerParams
from src.config.settings import (
    BATCH_VIDEO_PATH,
    END_BATCH_TO_UPSCALE,
    FINAL_VIDEO,
    INPUT_BATCHES_DIR,
    ORIGINAL_VIDEO,
    START_BATCH_TO_UPSCALE,
    TMP_VIDEO_PATH,
)
from src.files.file_actions import delete_file
from src.frames.frames_helpers import extract_frames_to_batches, get_fps_accurate
from src.frames.upscale import delete_frames, upscale_batches
from src.utils.logger import logger
from src.video.video_handling import VideoHandler


def print_header(title: str) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    logger.info(f"{'=' * 50}")
    logger.info(f"üéØ {title.upper()}".center(50))


def print_bottom(title: str) -> None:
    logger.info(f"‚úÖ {title.upper()}".center(50))
    logger.info(f"{'=' * 50}\n")


async def clean_up(audio: AudioHandler) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    logger.debug("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    await asyncio.gather(
        asyncio.to_thread(audio.delete_audio_if_exists),
        asyncio.to_thread(delete_frames, del_upscaled=False),
        asyncio.to_thread(delete_frames, del_upscaled=True),
        asyncio.to_thread(
            map, delete_file, glob.glob(os.path.join(BATCH_VIDEO_PATH, "*.mp4"))
        ),
        asyncio.to_thread(
            map, delete_file, glob.glob(os.path.join(TMP_VIDEO_PATH, "*.mp4"))
        ),
    )
    logger.debug("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")


def calculate_batches() -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    if END_BATCH_TO_UPSCALE == 0:
        batch_name_pattern = re.compile(r"batch_(\d+)")
        batch_count = len(
            [
                batch
                for batch in os.listdir(INPUT_BATCHES_DIR)
                if batch_name_pattern.match(batch)
            ]
        )
        logger.debug(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞—Ç—á–µ–π: {batch_count}")
        return batch_count

    logger.debug(
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π: {END_BATCH_TO_UPSCALE}"
    )
    return END_BATCH_TO_UPSCALE


async def process_batches(
    threads: int,
    ai_threads: str,
    video: VideoHandler,
    ai_realesrgan_path: str,
    start_batch: int,
    end_batch_to_upscale: int,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á–∏ —Å –∫–∞–¥—Ä–∞–º–∏."""
    end_batch = 0
    while end_batch != end_batch_to_upscale:
        end_batch = min(start_batch + threads - 1, end_batch_to_upscale)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π —Å {start_batch} –ø–æ {end_batch}")

        await upscale_batches(
            threads, ai_threads, ai_realesrgan_path, start_batch, end_batch
        )
        logger.success(f"–ë–∞—Ç—á–∏ {start_batch}-{end_batch} —É—Å–ø–µ—à–Ω–æ –∞–ø—Å–∫–µ–π–ª–µ–Ω—ã")

        batches_to_perform = [f"batch_{i}" for i in range(start_batch, end_batch + 1)]
        video.build_short_video(batches_to_perform)
        start_batch += threads


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ."""
    start_time = datetime.now()
    print_header("–∑–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–¥–µ–æ")

    try:
        my_computer = ComputerParams()
        ai_realesrgan_path = my_computer.ai_realesrgan_path
        ai_threads, process_threads = my_computer.get_optimal_threads()

        # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        logger.info(
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:"
            f"\n\t–û–°: {my_computer.cpu_name}"
            f"\n\tCPU –ø–æ—Ç–æ–∫–∏: {my_computer.cpu_threads}"
            f"\n\t–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {my_computer.safe_cpu_threads}"
            f"\n\t–°–∫–æ—Ä–æ—Å—Ç—å SSD: ~{my_computer.ssd_speed} MB/s"
            f"\n\tRAM: ~{my_computer.ram_total} GB"
            f"\n\t–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–π—Ä–æ–Ω–æ–∫: -j {ai_threads}"
            f"\n\t–ü—É—Ç—å –∫ –Ω–µ–π—Ä–æ–Ω–∫–µ –∞–ø—Å–∫–µ–π–ª–∞: {ai_realesrgan_path}"
        )

        print_header("–∏–∑–≤–ª–µ–∫–∞–µ–º '—Å—ã—Ä—å—ë' –∏–∑ –≤–∏–¥–µ–æ...")
        audio = AudioHandler(threads=my_computer.safe_cpu_threads // 2)
        await clean_up(audio)

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(audio.extract_audio())
        extract_frames_to_batches(my_computer.safe_cpu_threads // 2)
        fps = await asyncio.to_thread(get_fps_accurate, ORIGINAL_VIDEO)
        video = VideoHandler(fps=fps)
        print_bottom("`—Å—ã—Ä—å—ë` –∏–∑ –≤–∏–¥–µ–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ")

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print_header("–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ø—Å–∫–µ–π–ª–µ–Ω–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ...")
        end_batch_to_upscale = calculate_batches()
        logger.info(f"–í—Å–µ–≥–æ –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_batch_to_upscale}")
        await process_batches(
            process_threads,
            ai_threads,
            video,
            ai_realesrgan_path,
            START_BATCH_TO_UPSCALE,
            end_batch_to_upscale,
        )
        print_bottom("–∞–ø—Å–∫–µ–π–ª–µ–Ω–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        print_header("–Ω–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ...")
        total_short_videos = ceil(end_batch_to_upscale / process_threads)
        final_merge = await video.build_final_video(total_short_videos)
        logger.success(f"–û–±—â–µ–µ –≤–∏–¥–µ–æ —Å–æ–±—Ä–∞–Ω–æ: {final_merge}")

        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ")
        audio.tmp_video_path = final_merge
        await asyncio.to_thread(audio.insert_audio)
        logger.success(f"–ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ {FINAL_VIDEO}")
        print_bottom("—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        logger.success(f"–ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {FINAL_VIDEO}")
        execution_time = datetime.now() - start_time
        logger.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time}")
        print_bottom("—É–ª—É—á—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as error:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(error)}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
