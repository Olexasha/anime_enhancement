import asyncio
import os
import re
from datetime import datetime

from src.audio.audio_handling import AudioHandler
from src.config.comp_params import ComputerParams
from src.config.settings import (
    END_BATCH_TO_UPSCALE,
    FINAL_VIDEO,
    INPUT_BATCHES_DIR,
    ORIGINAL_VIDEO,
    START_BATCH_TO_UPSCALE,
)
from src.frames.frames_helpers import extract_frames_to_batches, get_fps_accurate
from src.frames.upscale import delete_frames, upscale_batches
from src.video.video_handling import VideoHandler


def print_header(title: str) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    print(f"\n{'=' * 50}")
    print(f"üéØ {title.upper()}".center(50))
    print(f"{'=' * 50}")


async def clean_up(audio: AudioHandler) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    await asyncio.gather(
        asyncio.to_thread(audio.delete_audio_if_exists),
        asyncio.to_thread(delete_frames, del_upscaled=False),
        asyncio.to_thread(delete_frames, del_upscaled=True),
    )


def calculate_batches() -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    if END_BATCH_TO_UPSCALE == 0:
        batch_name_pattern = re.compile(r"batch_(\d+)")
        return len(
            [
                batch
                for batch in os.listdir(INPUT_BATCHES_DIR)
                if batch_name_pattern.match(batch)
            ]
        )
    return END_BATCH_TO_UPSCALE


async def process_batches(
    threads: int,
    ai_threads: str,
    video: VideoHandler,
    ai_realesrgan_path: str,
    start_batch: int,
    end_batch_to_upscale: int,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á–∏ —Å –∫–∞–¥—Ä–∞–º–∏."""
    end_batch = 0
    while end_batch != end_batch_to_upscale:
        end_batch = min(start_batch + threads - 1, end_batch_to_upscale)
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏ —Å {start_batch} –ø–æ {end_batch}...")

        await upscale_batches(
            threads, ai_threads, ai_realesrgan_path, start_batch, end_batch
        )
        print(f"‚úÖ –ë–∞—Ç—á–∏ {start_batch}-{end_batch} —É—Å–ø–µ—à–Ω–æ –∞–ø—Å–∫–µ–π–ª–µ–Ω—ã")

        batches_to_perform = [f"batch_{i}" for i in range(start_batch, end_batch + 1)]
        short_video = await video.build_short_video(batches_to_perform)
        if short_video:
            await asyncio.to_thread(delete_frames, del_upscaled=True)
            print(f"üé• –í–∏–¥–µ–æ —Å–æ–±—Ä–∞–Ω–æ: {short_video}")
            print(f"üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞—Ç—á–µ–π {start_batch}-{end_batch}")

        start_batch += threads


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ."""
    start_time = datetime.now()

    my_computer = ComputerParams()
    ai_realesrgan_path = my_computer.ai_realesrgan_path
    ai_threads, process_threads = my_computer.get_optimal_threads()

    print_header("–∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
    print(
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:",
        f"\t- –û–°: {my_computer.cpu_name}",
        f"\t- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: {my_computer.cpu_threads}",
        f"\t- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º): {my_computer.safe_cpu_threads}",
        f"\t- –°–∫–æ—Ä–æ—Å—Ç—å SSD: ~{my_computer.ssd_speed} MB/s",
        f"\t- –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: ~{my_computer.ram_total} GB",
        f"\t- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–π—Ä–æ–Ω–æ–∫: -j {ai_threads} (–∑–∞–≥—Ä—É–∑–∫–∞:–æ–±—Ä–∞–±–æ—Ç–∫–∞:—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)",
        f"\t- –ü—É—Ç—å –∫ –Ω–µ–π—Ä–æ–Ω–∫–µ –∞–ø—Å–∫–µ–π–ª–∞: {ai_realesrgan_path}",
        sep="\n",
    )

    audio = AudioHandler(threads=process_threads)
    await clean_up(audio)

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(audio.extract_audio())
    extract_frames_to_batches(process_threads)
    fps = await asyncio.to_thread(get_fps_accurate, ORIGINAL_VIDEO)
    video = VideoHandler(fps=fps)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    end_batch_to_upscale = calculate_batches()
    print(f"\n–í—Å–µ–≥–æ –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_batch_to_upscale}")
    await process_batches(
        process_threads,
        ai_threads,
        video,
        ai_realesrgan_path,
        START_BATCH_TO_UPSCALE,
        end_batch_to_upscale,
    )

    await asyncio.to_thread(delete_frames, del_upscaled=False)
    print_header("—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ")
    final_merge = video.build_final_video()

    print("\nüîä –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ...")
    audio.tmp_video_path = final_merge
    await asyncio.to_thread(audio.insert_audio)
    print(f"‚úÖ –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ {FINAL_VIDEO}")

    print_header("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"\nüéâ –ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {FINAL_VIDEO}")
    end_time = datetime.now()
    print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time}")
    print("=" * 50)


if __name__ == "__main__":
    asyncio.run(main())
