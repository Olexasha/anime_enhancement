import asyncio
import glob
import os
import time

import cv2

from src.config.settings import BATCH_VIDEO_PATH, OUTPUT_BATCHES_DIR, TMP_VIDEO_PATH
from src.files.file_actions import delete_file
from src.video.video_exceptions import (
    VideoDoesNotExist,
    VideoMergingError,
    VideoReadFrameError,
)
from src.video.video_helpers import FIFOPriorityQueue, sort_video_paths


class VideoHandler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∞–ø—Å–∫–µ–π–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ —Å
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—á–µ—Ä–µ–¥—è–º–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.
    """

    def __init__(self, fps: float):
        self.fps = fps
        self.video_queue = FIFOPriorityQueue()

    async def build_short_video(self, frame_batches: list) -> str:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º—ã –∏–∑ –±–∞—Ç—á–µ–π –≤ –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ.
        :param frame_batches: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –±–∞—Ç—á–µ–π, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Ñ—Ä–µ–π–º—ã.
        :return: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
        """
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(frame_batches)} –±–∞—Ç—á–µ–π —Ñ—Ä–µ–π–º–æ–≤...")
        batch_range_start = frame_batches[0].split("_")[1]
        batch_range_end = frame_batches[-1].split("_")[1]
        frame_paths = self.__collect_frames(frame_batches)
        video_path = await self._generate_video_from_frames(
            frame_paths, batch_range_start, batch_range_end
        )
        self.video_queue.put((0, video_path))
        print(f"üì• –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {video_path}")
        return video_path

    def build_final_video(self) -> str | None:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ–¥–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ.
        :return: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É –∏–ª–∏ None, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.
        """
        print("\nüèÅ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –≤–∏–¥–µ–æ...")

        video_paths = []
        print(f"\nüîÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–∏—è–Ω–∏–µ {len(video_paths)} –≤–∏–¥–µ–æ:")
        for i in range(self.video_queue.qsize()):
            video_path = self.video_queue.get()[1]
            if not os.path.isfile(video_path):
                raise VideoDoesNotExist(video_path)
            video_paths.append(video_path)
            print(f"  {i + 1}. {os.path.basename(video_path)}")
        video_paths = sort_video_paths(video_paths)

        if not video_paths:
            raise ValueError("–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        output_video = self._handle_merging(video_paths)
        for video_path in video_paths:
            delete_file(video_path)
        return output_video

    async def _generate_video_from_frames(
        self, frame_paths: list, batch_range_start: str, batch_range_end: str
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–µ–π–º–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è OpenCV.
        :param frame_paths: –°–ø–∏—Å–æ–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ—Ä–µ–π–º–∞–º.
        :param batch_range_start: –ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.
        :param batch_range_end: –ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.
        :return: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
        """

        def __generate():
            video_path = self.__build_video_path(
                f"short_{batch_range_start}-{batch_range_end}"
            )
            print(f"üé• –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ {len(frame_paths)} —Ñ—Ä–µ–π–º–æ–≤...")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VideoWriter
            first_frame = cv2.imread(frame_paths[0])
            if first_frame is None:
                raise VideoReadFrameError(frame_paths[0])
            height, width, _ = first_frame.shape

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VideoWriter
            fourcc = cv2.VideoWriter_fourcc(*"mp4v")
            out = cv2.VideoWriter(video_path, fourcc, self.fps, (width, height))
            try:
                total_frames = len(frame_paths)
                for i, frame_path in enumerate(frame_paths):
                    frame = cv2.imread(frame_path)
                    if frame is None:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∫–∞–¥—Ä (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å): {frame_path}")
                        continue
                    out.write(frame)

                    # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 300 –∫–∞–¥—Ä–æ–≤
                    frame_num = i + 1
                    if frame_num % 500 == 0 or frame_num == total_frames:
                        print(f"üìπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {i + 1}/{total_frames}")
            finally:
                out.release()

            print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path} (FPS: {self.fps})")
            return video_path

        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, __generate)

    def _handle_merging(self, video_paths: list) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º.
        :param video_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.
        :return: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
        """
        cap = cv2.VideoCapture(video_paths[0])
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        cap.release()

        first_num = video_paths[0].split("_")[-1].split(".")[0].split("-")[0]
        last_num = video_paths[-1].split("_")[-1].split(".")[0].split("-")[-1]
        output_path = self.__build_video_path(
            f"merged_{first_num}-{last_num}", TMP_VIDEO_PATH
        )

        fourcc = cv2.VideoWriter_fourcc(*"mp4v")
        out = cv2.VideoWriter(
            filename=output_path,
            apiPreference=cv2.CAP_FFMPEG,
            fourcc=fourcc,
            fps=self.fps,
            frameSize=(width, height),
        )
        try:
            total_frames = sum(
                int(cv2.VideoCapture(p).get(cv2.CAP_PROP_FRAME_COUNT))
                for p in video_paths
            )
            start_time = time.time()
            self.__merge_videos(video_paths, out, total_frames, start_time)
            total_time = time.time() - start_time
            print(
                f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(video_paths)} –≤–∏–¥–µ–æ "
                f"–∑–∞ {total_time:.1f} —Å–µ–∫ ({total_frames / total_time:.1f} FPS)"
            )
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {os.path.basename(output_path)}")
        except VideoMergingError as e:
            print("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ:")
            raise VideoMergingError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        finally:
            out.release()

        return output_path

    @staticmethod
    def __merge_videos(
        video_paths: list,
        out: cv2.VideoWriter,
        total_frames: int,
        start_time: float,
    ) -> None:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º –≤ –æ–¥–∏–Ω –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª.
        :param video_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.
        :param out: –û–±—ä–µ–∫—Ç VideoWriter –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ.
        :param total_frames: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        :param start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ FPS –∏ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏.
        """
        processed_frames = 0
        for video_idx, video_path in enumerate(video_paths, 1):
            cap = cv2.VideoCapture(video_path)
            video_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

            print(
                f"\nüìπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ {video_idx}/{len(video_paths)} "
                f"({video_frames} –∫–∞–¥—Ä–æ–≤): {os.path.basename(video_path)}"
            )

            for frame_idx in range(video_frames):
                ret, frame = cap.read()
                if not ret:
                    break
                out.write(frame)
                processed_frames += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 –∫–∞–¥—Ä–æ–≤
                if processed_frames % 500 == 0:
                    elapsed = time.time() - start_time
                    fps = processed_frames / elapsed if elapsed > 0 else 0
                    remaining = (
                        (total_frames - processed_frames) / fps if fps > 0 else 0
                    )
                    print(
                        f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: {processed_frames}/{total_frames} "
                        f"({processed_frames / total_frames:.1%}) | "
                        f"FPS: {fps:.1f} | –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f}s",
                        end="",
                        flush=True,
                    )
            cap.release()

    @staticmethod
    def __build_video_path(video_name: str, path=BATCH_VIDEO_PATH):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º."""
        return os.path.join(path, f"{video_name}.mp4")

    @staticmethod
    def __collect_frames(batches_list: list) -> list:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –ø—É—Ç–∏ —Ñ—Ä–µ–π–º–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π.
        :param batches_list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –±–∞—Ç—á–µ–π, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Ñ—Ä–µ–π–º—ã.
        :return: –°–ø–∏—Å–æ–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ—Ä–µ–π–º–∞–º.
        """
        frame_paths = list()
        for batch in batches_list:
            batch_path = str(os.path.join(OUTPUT_BATCHES_DIR, batch))
            frame_paths.extend(
                sorted(glob.glob(os.path.join(batch_path, "frame*.jpg")))
            )
            print(f"üìÇ –°–æ–±—Ä–∞–Ω–æ {len(frame_paths)} —Ñ—Ä–µ–π–º–æ–≤ –∏–∑ {len(batches_list)} –±–∞—Ç—á–µ–π")
        return frame_paths
