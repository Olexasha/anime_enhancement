import asyncio
import os
import subprocess
from concurrent.futures import ProcessPoolExecutor
from typing import Optional

from src.audio.audio_helpers import run_ffmpeg_command_with_progress
from src.config.settings import (
    ALLOWED_CPU_THREADS,
    AUDIO_PATH,
    FINAL_VIDEO,
    ORIGINAL_VIDEO,
    RESOLUTION,
    TMP_VIDEO_PATH,
)
from src.files.file_actions import delete_file
from src.video.video_helpers import get_video_duration


class AudioHandler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∫ –≤–∏–¥–µ–æ.
    """

    CANALS = "2"  # –°—Ç–µ—Ä–µ–æ
    SAMPLE_FREQ = "44100"  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    BITRATE = "192k"  # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ

    def __init__(
        self,
        input_video_path: str = ORIGINAL_VIDEO,
        merged_video_path: str = TMP_VIDEO_PATH,
        output_video_path: str = FINAL_VIDEO,
        audio_path: str = AUDIO_PATH,
        audio_format: str = "mp3",
        resolution: str = RESOLUTION,
    ):
        self.in_video_path = input_video_path
        self.tmp_video_path = merged_video_path
        self.out_video_path = output_video_path
        self.audio_path = audio_path
        self.audio_format = audio_format
        self.resolution = resolution
        self.codec = "libmp3lame" if self.audio_format == "mp3" else self.audio_format

        print(f"üîä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ:")
        print(f"\t–ö–æ–¥–µ–∫: {self.codec}")
        print(f"\t–ë–∏—Ç—Ä–µ–π—Ç: {self.BITRATE}")
        print(f"\t–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {self.SAMPLE_FREQ} Hz")
        print(f"\t–ö–∞–Ω–∞–ª—ã: {self.CANALS} (—Å—Ç–µ—Ä–µ–æ)")

    def extract_audio_sync(self) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª.
        """
        audio_file = self.get_audio_full_path()
        print(f"\nüéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑: {self.in_video_path}")
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {audio_file}")

        ffmpeg_args = [
            "-y", "-i", self.in_video_path,
            "-vn", "-acodec", self.codec,
            "-ar", self.SAMPLE_FREQ, "-ac", self.CANALS,
            "-b:a", self.BITRATE, "-threads", str(ALLOWED_CPU_THREADS),
            "-loglevel", "error", audio_file,
        ]

        result = subprocess.run(
            ["ffmpeg", *ffmpeg_args],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            creationflags=subprocess.CREATE_NO_WINDOW if os.name == "nt" else 0,
        )

        if result.returncode != 0:
            raise RuntimeError(
                f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ (FFmpeg): {result.stderr.decode()}"
            )
        self.__check_audio_extracted(audio_file)
        self.audio_path = audio_file

    async def extract_audio(self) -> Optional[str]:
        loop = asyncio.get_running_loop()
        with ProcessPoolExecutor() as pool:
            return await loop.run_in_executor(pool, self.extract_audio_sync)

    def insert_audio(self) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –≤–∏–¥–µ–æ, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ, —Å —É—á–µ—Ç–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ.
        """
        duration, fps = get_video_duration(self.tmp_video_path, return_fps_too=True)
        audio_file = self.get_audio_full_path()
        print(f"\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"\t–ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ: –∏—Å—Ö–æ–¥–Ω—ã–π (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)")
        print(f"\t–ö–æ–¥–µ–∫ –∞—É–¥–∏–æ: –∏—Å—Ö–æ–¥–Ω—ã–π ({self.audio_format})")
        print(f"\t–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {duration:.2f} —Å–µ–∫")
        print(f"\tFPS –≤–∏–¥–µ–æ: {fps}")
        print(f"\t–ü–æ—Ç–æ–∫–æ–≤: {ALLOWED_CPU_THREADS}")
        print(f"\t–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {self.resolution}")

        cmd = [
            "ffmpeg", "-y", "-i", self.tmp_video_path,
            "-i", audio_file,
            "-c:v", "copy",
            "-c:a", "copy",
            "-map", "0:v:0",
            "-map", "1:a:0",
            "-shortest", "-progress", "-",
            "-threads", str(ALLOWED_CPU_THREADS),
            "-nostats", "-loglevel", "error",
            self.out_video_path,
        ]
        try:
            run_ffmpeg_command_with_progress(
                cmd, duration, desc="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∫ –≤–∏–¥–µ–æ", unit="—Å–µ–∫"
            )
        except subprocess.CalledProcessError as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
            raise
        delete_file(audio_file)
        delete_file(self.tmp_video_path)

    def get_audio_full_path(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.
        """
        filename = os.path.splitext(os.path.basename(self.in_video_path))[0]
        return os.path.join(self.audio_path, f"{filename}.{self.audio_format}")

    def delete_audio_if_exists(self, audio_path: str = None) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

        :param audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
        """
        if audio_path is None:
            audio_path = self.get_audio_full_path()
        if os.path.exists(audio_path):
            delete_file(audio_path)
            print(f"\nüóëÔ∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª {audio_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n")
        else:
            print(f"\n–ê—É–¥–∏–æ—Ñ–∞–π–ª {audio_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n")

    def __check_audio_extracted(self, audio_file) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∞—É–¥–∏–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
        """
        if audio_file and os.path.exists(audio_file):
            print(f"\n\n‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_file}\n")
            self.audio_path = audio_file
        else:
            print("\n\n‚ö†Ô∏è –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ.\n")
            raise FileNotFoundError(
                "–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –±—ã–ª–æ –ª–∏ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ."
            )

    def __str__(self):
        return (
            f"AudioHandler(in_video_path={self.in_video_path}, "
            f"tmp_video_path={self.tmp_video_path}, "
            f"out_video_path={self.out_video_path}, "
            f"audio_path={self.audio_path}, "
            f"audio_format={self.audio_format}, "
            f"resolution={self.resolution})"
        )

    def __repr__(self):
        return self.__str__()
